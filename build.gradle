/*
 * Copyright 2015-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
        classpath 'org.ajoberstar:gradle-git:1.7.2'
        classpath 'net.nemerosa:versioning:2.7.1'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
        classpath 'gradle.plugin.gradle-java9-collision:plugin:0.2.3'
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'net.nemerosa.versioning'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.jonnyzzz.java9c'

Date buildTimeAndDate = new Date()
ext {
    buildBy = System.properties['user.name']
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildRevision = versioning.info.commit
    buildJdk = "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})".toString()
    buildCreatedBy = "Gradle ${gradle.gradleVersion}"
}

apply from: 'gradle/code-quality.gradle'

idea {
    project {
        jdkName rootProject.sourceCompatibility
        languageLevel rootProject.sourceCompatibility
    }
}

repositories {
    jcenter()
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs = ['-Xlint:all', '-Xlint:deprecation', '-Xlint:unchecked']
}

dependencies {
    compile "${project.group}:jsr377-api:$jsr377Version"
    compile "org.junit.jupiter:junit-jupiter-api:$junit5Version"
    compile "org.hamcrest:java-hamcrest:$hamcrestVersion"
    compile("org.awaitility:awaitility:$awaitilityVersion") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
        exclude group: 'org.hamcrest', module: 'hamcrest-library'
    }
}

task sourcesJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    group 'Build'
    description 'An archive of the javadoc'
    classifier 'javadoc'
    dependsOn javadoc
    from javadoc.destinationDir
}

artifacts {
    sourcesJar
    javadocJar
}

javadoc {
    excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

    options.use         = true
    options.splitIndex  = true
    options.encoding    = 'UTF-8'
    options.author      = true
    options.version     = true
    options.windowTitle = "$project.name $version"
    options.docTitle    = "$project.name $version"
    options.footer      = project.javadocFooter
    options.links       = ['http://docs.oracle.com/javase/8/docs/api/']
}

apply from: 'gradle/publishing.gradle'